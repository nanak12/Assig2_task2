import java.io.*;
public class StackTest 
{
  public static void main (String [] args) {
    Stack<Double> S1 = new LStack<Double>();
  	Stack<Double> S2 = new LStack<Double>();
   	Stack<Double> S3 = new LStack<Double>();
   	Stack<Double> S4 = new LStack<Double>();
   	Stack<Double> S5 = new LStack<Double>();
   	 
    S1.push(3.0);
    S1.push(5.0);
    S1.pop(); S1.pop();
    S1.push(3.0*5.0);
    S1.push(6.0);
    S1.push(2.0);
    S1.pop(); S1.pop();
    S1.push(6.0/2.0);
    S1.pop(); S1.pop();
    S1.push((6.0/2.0)+(3.0*5.0));
    System.out.println("3 5 * 6 2 / + = " + S1.topValue());
    System.out.println("");
    
    S2.push(3.0);
    S2.push(5.0);
    S2.push(6.0);
    S2.pop(); S2.pop();
    S2.push(6.0+5.0);
    S2.pop(); S2.pop();
    S2.push((6.0+5.0)*3.0);
    S2.push(2.0);
    S2.pop(); S2.pop();
    S2.push(((6.0+5.0)*3.0)/2.0);
    System.out.println("3 5 6 + * 2 / = " + S2.topValue());
  	System.out.println("");
  	
  	// Test#1
  	S3.push(7.0);
  	S3.push(8.0);
  	S3.push(1.0);
  	S3.pop(); S3.pop();
  	S3.push(8.0+1.0);
  	S3.pop(); S3.pop();
  	S3.push(7.0*(8.0+1.0));
  	S3.push(5.0);
  	S3.pop(); S3.pop();
  	S3.push((7.0*(8.0+1.0))+5);
  	System.out.println("7 8 1 + * 5 + = " + S3.topValue()); 
  	System.out.println("");
  	
  	// Test#2
  	S4.push(1.0);
  	S4.push(7.0);
  	S4.pop(); S4.pop();
  	S4.push(7.0-1.0);
  	S4.push(5.0);
  	S4.pop(); S4.pop();
  	S4.push((7.0-1.0)+5);
  	S4.push(3.0);
  	S4.pop(); S4.pop();
  	S4.push(((7.0-1.0)+5)*3);
  	System.out.println("1 7 - 5 + 3 * = " + S4.topValue()); 
  	System.out.println("");	
  	// Test#3
  	S5.push(2.0);
  	S5.push(4.0);
  	S5.pop(); S5.pop();
  	S5.push(4.0/2.0);
  	S5.push(7.0);
  	S5.pop(); S5.pop();
  	S5.push(7.0*(4.0/2.0));
  	S5.push(5.0);
  	S5.pop(); S5.pop();
  	S5.push((7.0*(4.0+2.0))/5);
  	System.out.println("2 4 / 7 * 5 / = " + S5.topValue()); 
  }
}
////////////////////////////////////////////////////////////////////////////////


class Link<E> {
  private E element;        
  private Link<E> next;     

  Link(E it, Link<E> nextval) { element = it;  next = nextval; }
    
  Link(Link<E> nextval) { next = nextval; }
  
  Link<E> next() { return next; }  
    
  Link<E> setNext(Link<E> nextval) { return next = nextval; }     
    	
  E element() { return element; } 
  	
  E setElement(E it) { return element = it; }
}
//////////////////////////////////////////////////////////////////////////////////


public interface Stack<E> {
  public void clear();
  public void push(E it);
  public E pop();
  public E topValue();
  public int length();
}
////////////////////////////////////////////////////////////////////////////////////


class LStack<E> implements Stack<E> {
  private Link<E> top;        
  private int size;  	

  public LStack() { top = null; size = 0; }
  public LStack(int size) { top = null; size = 0; }


  public void clear() { top = null; size = 0; }
  
  public void push(E it) {
    top = new Link<E>(it, top);
    size++;
  }

  public E pop() {
    assert top != null : "Stack is empty";
    E it = top.element();
    top = top.next();
    size--;
    return it;
  }

  public E topValue() {
    assert top != null : "Stack is empty";
    return top.element();
  }
  
  public E beforeTopValue(){
  	assert top != null : "Stack is empty";
  	top.element();
    return top.element();
  }
  public int length() { return size; }

  public String toString()
  {
    StringBuffer out = new StringBuffer((length() + 1) * 4);
    out.append("< ");
    Link<E> temp = top;
    while (temp != null) {
      out.append(temp.element());
      out.append(" ");
      temp = temp.next();
    }
    out.append(">");
    return out.toString();
  }
}
